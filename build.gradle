plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'pl.edu.pwr.database'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'pl.edu.pwr.database.administrativedivisionofpoland'
    mainClass = 'pl.edu.pwr.database.administrativedivisionofpoland.Main'
}

javafx {
    version = '17.0.10'
    modules = ['javafx.controls', 'javafx.fxml']
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation files('libs/Contract.jar')
    implementation "org.openjfx:javafx-base:17.0.10:${platform}"
    implementation "org.openjfx:javafx-graphics:17.0.10:${platform}"
    implementation "org.openjfx:javafx-controls:17.0.10:${platform}"
    implementation "org.openjfx:javafx-fxml:17.0.10:${platform}"
}

test {
    useJUnitPlatform()
}

task fatJar(type: Jar) {
    manifest {
        attributes(
                'Class-Path': configurations.collect { it.getName() }.join(' '),
                'Main-Class': 'pl.edu.pwr.database.administrativedivisionofpoland.Launcher'
        )
    }
    from sourceSets.main.allSource
    archiveBaseName = 'SZDOPAPLinux'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}